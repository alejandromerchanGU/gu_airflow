CREATE OR REPLACE TABLE DB_GU_DWH.CORE_TABLES.RAPTOR_CACHE AS
SELECT
    s.SUPPORTER_ID,
    s.NONPROFIT_ID,
    s.FIRST_NAME,
    s.LAST_NAME,
    s.FULL_NAME,
    s.IS_ACTIVE,
    s.LAST_INTERACTION_DATE,
    so.OPTIN_TOKEN,
    so.payload,
    smf.POST_ID,
    smf.COMMENT_ID,
    smf.FEED_TYPE,
    smf.ACTIVITY_MESSAGE,
    smf.CREATED_AT AS MESSAGE_CREATED_AT,
    sei.EXTERNAL_APP_CODE,
    sei.ID_NAME,
    sei.ID_VALUE,
    sei.RECORD_STATUS AS EXTERNAL_RECORD_STATUS,
    upc.PAGE_ACCESS_TOKEN,
    upc.PAGE_ID,
    COUNT(s.SUPPORTER_ID) OVER () AS TOTAL_SUPPORTERS
FROM
    DB_GU_DWH.CORE_TABLES.SUPPORTER s
LEFT JOIN
    DB_GU_DWH.CORE_TABLES.SUPPORTER_OPTINS so
    ON s.SUPPORTER_ID = so.SUPPORTER_ID
    AND s.NONPROFIT_ID = so.NONPROFIT_ID
    AND (so.DELETED = FALSE OR so.DELETED IS NULL)
LEFT JOIN
    DB_GU_DWH.CORE_TABLES.SUPPORTER_MESSAGING_FEEDS smf
    ON s.SUPPORTER_ID = smf.SUPPORTER_ID
    AND s.NONPROFIT_ID = smf.NONPROFIT_ID
    AND (smf.DELETED = FALSE OR smf.DELETED IS NULL)
LEFT JOIN
    DB_GU_DWH.CORE_TABLES.SUPPORTER_EXTERNAL_IDS sei
    ON s.SUPPORTER_ID = sei.SUPPORTER_ID
    AND s.NONPROFIT_ID = sei.NONPROFIT_ID
    AND (sei.DELETED = FALSE OR sei.DELETED IS NULL)
LEFT JOIN
    DB_GU_DWH.CORE_TABLES.USER_PAGE_CONFIG upc
    ON s.NONPROFIT_ID = upc.NONPROFIT_ID
WHERE
    s.IS_ACTIVE = TRUE
    AND (s.DELETED = FALSE OR s.DELETED IS NULL)
    AND s.LAST_INTERACTION_DATE >= CURRENT_DATE - INTERVAL '1 YEAR'
limit 1000;